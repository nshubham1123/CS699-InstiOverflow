{"ast":null,"code":"import { GET_ANSWERS, ANSWER_ERROR, ADD_ANSWER, DELETE_ANSWER } from './answers.types';\nimport axios from 'axios';\nimport { setAlert } from '../alert/alert.actions';\nexport const getAnswers = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/answers/${id}`);\n    console.log(\"getAnswer\", res.data);\n    dispatch({\n      type: GET_ANSWERS,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Answer\n\nexport const addAnswer = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post(`/api/posts/answers/${postId}`, formData, config);\n    dispatch({\n      type: ADD_ANSWER,\n      payload: res.data.data\n    });\n    dispatch(setAlert(res.data.message, 'success'));\n    dispatch(getAnswers(postId));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Answer\n\nexport const deleteAnswer = AnswerId => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/answers/${AnswerId}`);\n    dispatch({\n      type: DELETE_ANSWER,\n      payload: AnswerId\n    });\n    dispatch(setAlert(res.data.message, 'success'));\n  } catch (err) {\n    dispatch(setAlert(err.response.data.message, 'danger'));\n    dispatch({\n      type: ANSWER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/ashwani/699/project/instiOverflow/client/src/redux/answers/answersAction.js"],"names":["GET_ANSWERS","ANSWER_ERROR","ADD_ANSWER","DELETE_ANSWER","axios","setAlert","getAnswers","id","dispatch","res","get","console","log","data","type","payload","err","msg","response","statusText","status","addAnswer","postId","formData","config","headers","post","message","deleteAnswer","AnswerId","delete"],"mappings":"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","sourcesContent":["import {\n    GET_ANSWERS,\n    ANSWER_ERROR,\n    ADD_ANSWER,\n    DELETE_ANSWER\n} from './answers.types';\n\nimport axios from 'axios';\nimport {setAlert} from '../alert/alert.actions';\n\nexport const getAnswers = id => async dispatch => {\n    try {\n        const res = await axios.get(`/api/posts/answers/${id}`);\n             console.log(\"getAnswer\",res.data)\n        dispatch({\n            type: GET_ANSWERS,\n            payload: res.data.data\n        });\n    } catch (err) {\n        dispatch({\n            type: ANSWER_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Add Answer\nexport const addAnswer = (postId,formData) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    try {\n        const res = await axios.post(`/api/posts/answers/${postId}`, formData, config);\n\n        dispatch({\n            type: ADD_ANSWER,\n            payload: res.data.data\n        });\n\n        dispatch(setAlert(res.data.message, 'success'));\n\n        dispatch(getAnswers(postId));\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: ANSWER_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Delete Answer\nexport const deleteAnswer = AnswerId => async dispatch => {\n    try {\n\n        const res = await axios.delete(`/api/posts/answers/${AnswerId}`);\n\n        dispatch({\n            type: DELETE_ANSWER,\n            payload: AnswerId\n        });\n\n        dispatch(setAlert(res.data.message, 'success'));\n    } catch (err) {\n        dispatch(setAlert(err.response.data.message, 'danger'));\n\n        dispatch({\n            type: ANSWER_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};"]},"metadata":{},"sourceType":"module"}